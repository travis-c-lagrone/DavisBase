@startuml REPL
control ":DavisBase"
participant ":Host"
participant ":Parser"
participant ":Compiler"
participant ":Executor"
database ":Storage"

loop
    ":DavisBase" -> ":Host" ++ #LightGray : read()
    return statement: String

    ":DavisBase" -> ":Parser" ++ #LightGray : parse(statement: String)
    return AbstractSyntaxTree

    ":DavisBase" -> ":Compiler" ++ #LightGray : compile(:AbstractSyntaxTree, context: Storage)
        ":Compiler" -> ":Storage" : open(dataDictionary: TableId)
        activate ":Storage"
            ":Compiler" -> ":Storage" ++ #LightGray : read()
            return schema: Data
        ":Compiler" -> ":Storage" : close()
        deactivate ":Storage"
    return :Command

    ":DavisBase" -> ":Executor" ++ #LightGray : execute(:Command, context: Storage)
        ":Executor" -> ":Storage" : open(target: TableId)
        activate ":Storage"
            ref over ":Executor", ":Storage" : command execution
        ":Executor" -> ":Storage" : close()
        deactivate ":Storage"
    return :Result

    ":DavisBase" -> ":Host" : write(:Result)
end
@enduml
